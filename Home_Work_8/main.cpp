//Д/з: Реализовать двусвязный список. (структура данных не сложная можно почитать в той же википедии, если возникнут вопросы пишите).
//Список должен поддерживать следующие операции :
//- возвращать следующий и предыдущий элемент списка(относительно текущего элемента), 
//		чтобы можно было проитерироваться по списку в двух направлениях;
//- добавлять элементы в конец, начало списка и перед указанным элементом;+
//- удалять элементы из конца, начала списка и также, чтобы была возможность удалить указанный элемент;+
//- получить размер списка;+
//- определить пустой или не пустой;+
//- создать копию списка и также, чтобы была возможность уже существующий список перезаписать элементами другого списка;
//- сортировка, которая возвращает копию текущего списка с отсортированными элементов(алгоритм сортировки любойкакой понравится
//		реализовать, можно ту же "сортировку выбором", что мы делали на занятии);

#include<iostream>
#include"List.h"

template <typename T1, typename T2>
void PrintTest(List<T1>& list_1, List<T2>& list_2, std::string text)
{
	std::cout << text << "\n";
	std::cout << "List double size = " << list_1.Size() << ":\t";
	Print(list_1);
	std::cout << "List int size = " << list_2.Size() << ":\t";
	Print(list_2);
}

int main() 
{
	//создаем список со значениями  типа double
	List<double> list_d;
	//создаема список со значениями типа int
	List<int> list_i;
	
	//заполнение списков random значениями
	for (int i = 0; i <= 10; ++i) {
		list_d.AddEnd((double)rand());//с добавлением в конец списка
		list_i.AddBegine(rand());//с добавлением в начало списка
	}
	 
	//вывод списков
	PrintTest(list_d, list_i, "Initialization: ");

	//добавление по указаному индексу
	list_d.Insert(4.56, 0);
	list_i.Insert(49, list_i.Size() - 1);

	//вывод списков
	PrintTest(list_d, list_i, "Addition: ");

	//удаление элементов
	list_d.Dell(2);//по индексу
	list_i.Dell(4);
	list_d.DellEnd();//с конца
	list_i.DellBegine();//с начала

	//вывод списков
	PrintTest(list_d, list_i, "Removal: ");

	//создание копии списка
	List<double> list_2d;
	list_2d.Copy(list_d);//копирование list_d в list_2d
	PrintTest(list_2d, list_i, "Copy: ");

	//установка значения списка по индексу
	list_2d[2] = 0;
	list_i[4] = 0;
	PrintTest(list_2d, list_i, "Seting: ");

	//сортировка(быстрая)
	Sort(list_2d, 0, list_2d.Size() - 1);//сортировка от 0 до конечного индекса
	Sort(list_i, 5, list_i.Size() - 1);//сортировка от 5 до конечного индекса
	PrintTest(list_2d, list_i, "Sorting: ");
	
	//очистка списка
	if (!list_d.IsEmpty()) //проверка пустой ли список
		list_d.Clear();
	if(!list_i.IsEmpty())
		list_i.Clear();

	//вывод списков
	PrintTest(list_d, list_i, "Cleaning: ");










}

